#############################################################################
# Sample Cantaloupe configuration file
#
# Copy this file to `cantaloupe.properties` and edit as desired. Then, launch
# Cantaloupe with the `-Dcantaloupe.config=cantaloupe.properties` option.
#
# Note that backslashes need to be doubled, like this: \\
#############################################################################

# TCP port to bind the web server to.
http.port = 8182

# Uncomment to require HTTP Basic authentication.
#http.auth.basic = true
#http.auth.basic.username = myself
#http.auth.basic.secret = password

# Controls the response Content-Disposition header for images. Allowed values
# are `inline`, `attachment`, and `none`.
http.content_disposition = inline

# The base URI to use for internal links, such as Link headers and JSON-LD @id
# values. This is mainly needed in reverse-proxy scenarios, where a public base
# URI needs to override the local URI. Leave blank to use the default.
base_uri =

# Helpful in development
print_stack_trace_on_error_pages = true

###############
# RESOLVERS
###############

# The resolver that translates the identifier in the URL to an image source.
# Available values are `FilesystemResolver`, `HttpResolver`, `JdbcResolver`,
# and `AmazonS3Resolver`.
resolver = FilesystemResolver

###
# FilesystemResolver
###

# Server-side path that will be prefixed to the identifier in the URL.
# Trailing slash is important.
FilesystemResolver.path_prefix = /home/myself/images/

# Server-side path or extension that will be suffixed to the identifier
# in the URL.
FilesystemResolver.path_suffix =

# Normally, slashes in an identifier must be percent-encoded as "%2F". If
# your proxy is incapable of passing these through un-decoded, you can
# define an alternate character or character sequence to represent a path
# separator. Supply the non-percent-encoded version here, and use the
# percent-encoded version in IIIF URLs.
#FilesystemResolver.path_separator =

###
# HttpResolver
###

# URL that will be prefixed to the identifier in the request URL. Trailing
# slash is important.
HttpResolver.url_prefix = http://localhost/images/

# Path, extension, query string, etc. that will be suffixed to the
# identifier in the request URL.
HttpResolver.url_suffix =

# See FilesystemResolver.path_separator for an explanation of this.
#HttpResolver.path_separator =

# Used for HTTP Basic authentication.
HttpResolver.auth.basic.username =
HttpResolver.auth.basic.secret =

###
# JdbcResolver
###

JdbcResolver.connection_string = jdbc:postgresql://localhost:5432/my_database
JdbcResolver.user = postgres
JdbcResolver.password = postgres

# JavaScript function that takes in an unencoded identifier and returns the
# value that will be used in prepared statements.
JdbcResolver.function.identifier = function getDatabaseIdentifier(url_identifier) {\
      // return the un-altered identifier\
      return url_identifier;\
      // if the identifiers were stored in the database as\
      //"identifier-something", then we would return this instead:\
      // return url_identifier + "-something";\
  }

# JavaScript function that returns a media (MIME) type. If the media type is
# stored in the database, this can return an SQL statement to retrieve it, in
# which case the "SELECT" and "FROM" clauses should be in uppercase in order
# to be autodetected. If commented out, Cantaloupe will infer the media type
# from the identifier extension (if present).
JdbcResolver.function.media_type = function getMediaType() {\
      return "SELECT media_type " +\
          "FROM item " +\
          "WHERE filename = ?"\
  }

# SQL statement that selects the BLOB corresponding to the value returned by
# the getDatabaseIdentifier() function above.
JdbcResolver.lookup_sql = SELECT image \
    FROM item \
    WHERE filename = ?

###
# AmazonS3Resolver
###

# See: http://aws.amazon.com/security-credentials
# Access key ID associated with your AWS account.
AmazonS3Resolver.access_key_id =
# Secret key associated with your AWS account.
AmazonS3Resolver.secret_key =

# Name of a bucket containing images.
AmazonS3Resolver.bucket.name =

# See: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
# Can be commented out or left blank.
#AmazonS3Resolver.bucket.region = us-east-1

###############
# PROCESSORS
###############

# Image processors to use for various source formats. Available values are
# `Java2dProcessor`, `GraphicsMagickProcessor`, `ImageMagickProcessor`,
# `KakaduProcessor`, `JaiProcessor`, `ExactImageProcessor`, and
# `FfmpegProcessor`.

# These extension-specific definitions are optional.
processor.avi = FfmpegProcessor
#processor.jpg = ImageMagickProcessor
#processor.jp2 = KakaduProcessor
processor.mov = FfmpegProcessor
processor.mp4 = FfmpegProcessor
#processor.tif = GraphicsMagickProcessor
processor.webm = FfmpegProcessor

# Fall back to this processor for any formats not assigned above.
processor.fallback = Java2dProcessor

###
# ExactImageProcessor
###

# Optional; overrides the PATH
#ExactImageProcessor.path_to_binaries = /usr/local/bin

###
# FfmpegProcessor
###

# Optional; overrides the PATH
#FfmpegProcessor.path_to_binaries = /usr/local/bin

###
# GraphicsMagickProcessor
###

# Optional; overrides the PATH
#GraphicsMagickProcessor.path_to_binaries = /usr/local/bin

###
# ImageMagickProcessor
###

# Optional; overrides the PATH
#ImageMagickProcessor.path_to_binaries = /usr/local/bin

###
# Java2dProcessor
###

# JPEG output quality. Should be a number between 0-1 ending in "f"
Java2dProcessor.jpg.quality = 0.7f

# Available values are `TIFFImageReader` and `TIFFImageDecoder`.
# TIFFImageReader is optimized for pyramidal TIFFs, but both are flaky in
# their own ways. If you notice any issues, try switching.
Java2dProcessor.tif.reader = TIFFImageReader

###
# KakaduProcessor
###

# Optional; overrides the PATH
#KakaduProcessor.path_to_binaries = /usr/local/bin

# Due to a quirk of kdu_expand, you will need to create a symbolic link to
# /dev/stdout somewhere called `stdout.ppm`, like this:
# `ln -s /dev/stdout /path/to/stdout.ppm`
KakaduProcessor.path_to_stdout_symlink = /path/to/stdout.ppm

# Available values are `jai` and `java2d`.
KakaduProcessor.post_processor = java2d

###############
# CACHING
###############

# Whether to enable the response Cache-Control header.
cache.client.enabled = true

# Customize the response Cache-Control header. (This may be overridden by
# proxies.) Comment out to disable the Cache-Control header.
cache.client.max_age = 2592000
cache.client.shared_max_age =
cache.client.public = true
cache.client.private = false
cache.client.no_cache = false
cache.client.no_store = false
cache.client.must_revalidate = false
cache.client.proxy_revalidate = false
cache.client.no_transform = true

# The only available value is `FilesystemCache`. Comment out or set blank
# to disable caching.
#cache.server = FilesystemCache

# If true, the source image will be checked to make sure it exists before a
# cached copy is returned. If false, the cached copy will be returned without
# any checking. Resolving first is safer but slower.
# Note: this has no effect with the IIIF 1.1 endpoint -- it is effectively
# always true.
cache.server.resolve_first = true

###
# FilesystemCache
###

# If this directory does not exist, it will be created automatically.
FilesystemCache.pathname = /var/cache/cantaloupe

# Time before a cached image becomes stale and needs to be reloaded. Set to
# blank or 0 for "forever"
FilesystemCache.ttl_seconds = 2592000

###
# JdbcCache
###

JdbcCache.connection_string = jdbc:postgresql://localhost:5432/cantaloupe
JdbcCache.user = postgres
JdbcCache.password =

# These will be created automatically.
JdbcCache.image_table = image_cache
JdbcCache.info_table = info_cache

# Time before a cached image becomes stale and needs to be reloaded. Set to
# blank or 0 for "forever"
JdbcCache.ttl_seconds = 2592000

###############
# LOGGING
###############

###
# Application Log
###

# `trace`, `debug`, `info`, `warn`, `error`, `all`, or `off`
log.application.level = debug

log.application.ConsoleAppender.enabled = true
log.application.ConsoleAppender.pattern = %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

log.application.FileAppender.enabled = false
log.application.FileAppender.pathname = /path/to/logs/cantaloupe.log
log.application.FileAppender.pattern = %date %level [%thread] %logger{10} [%file:%line] %msg%n

log.application.RollingFileAppender.enabled = false
log.application.RollingFileAppender.pathname = /path/to/logs/cantaloupe.log
log.application.RollingFileAppender.pattern = %date %level [%thread] %logger{10} [%file:%line] %msg%n
log.application.RollingFileAppender.policy = TimeBasedRollingPolicy
log.application.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = /path/to/logs/cantaloupe-%d{yyyy-MM-dd}.log
log.application.RollingFileAppender.TimeBasedRollingPolicy.max_history = 30

###
# Access Log
###

log.access.ConsoleAppender.enabled = true

log.access.FileAppender.enabled = false
log.access.FileAppender.pathname = /path/to/logs/access.log

log.access.RollingFileAppender.enabled = false
log.access.RollingFileAppender.pathname = /path/to/logs/access.log
log.access.RollingFileAppender.policy = TimeBasedRollingPolicy
log.access.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = /path/to/logs/access-%d{yyyy-MM-dd}.log
log.access.RollingFileAppender.TimeBasedRollingPolicy.max_history = 30
